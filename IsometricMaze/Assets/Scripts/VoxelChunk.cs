using System.Collections.Generic;
using UnityEngine;

[RequireComponent(typeof(MeshFilter))]
[RequireComponent(typeof(MeshCollider))]
public class VoxelChunk : MonoBehaviour
{
    /// <summary>
    /// This enum describes the 6 sides of the voxel cubes
    /// </summary>
    public enum VoxelSide
    {
        TOP, NORTH, EAST, SOUTH, WEST, BOTTOM
    }

    /// <summary>
    /// The texture coordinates (in cells, 0,0 being the bottom left cell)
    /// </summary>
    private Vector2 top = new Vector2(1, 3);
    private Vector2 north = new Vector2(1, 2);
    private Vector2 bottom = new Vector2(1, 1);
    private Vector2 south = new Vector2(1, 0);
    private Vector2 west = new Vector2(2, 1);
    private Vector2 east = new Vector2(0, 1);

    /// <summary>
    /// The amount of cells in the unfolded cube texture (TODO check if this can be made generic, 4x4 worked better, maybe rounding errors)
    /// </summary>
    private const float textureUnit = 0.25f;

    /// <summary>
    /// A list of "vertices" , which are the "points" in 3D space, the corners of the cube if you will
    /// </summary>
    private List<Vector3> vertices = new List<Vector3>();
    /// <summary>
    /// A list of triangles. This in fact is a list of "triplets", using indices in the vertices list as corners
    /// </summary>
    private List<int> triangles = new List<int>();
    /// <summary>
    /// A list of uvFaces , these are the rendering faces to give the voxel mesh a "skin"
    /// </summary>
    private List<Vector2> uvFaces = new List<Vector2>();
    /// <summary>
    /// The mesh that will be used to represent the voxel in the unity world
    /// </summary>
    private Mesh mesh;
    /// <summary>
    /// The collider of the mesh. NOTE : This might be overkill in some cases as we are working tile based anyway...
    /// </summary>
    private MeshCollider col;
    /// <summary>
    /// The current facecount (important for expanding the voxel world)
    /// </summary>
    private int faceCount;

    /// <summary>
    /// This generates the mesh based on the voxel world and the maze data array that's being loaded in
    /// </summary>
    /// <param name="world"> The voxel world this chunk will be part of</param>
    /// <param name="mazeData">The maze data array, generated by a VoxelMazeGenerator</param>
    public void GenerateMesh(VoxelWorld world, byte[,,] mazeData)
    {
        //if there is no mesh yet, we create one
        if (mesh == null)
        {
            mesh = new Mesh();
        }
        //The maximal amount of rows we can have in this maze
        int rMax = mazeData.GetUpperBound(0);
        //The maximal amount of colums we can have in this maze
        int cMax = mazeData.GetUpperBound(2);
        //The maximal height the maze can have (for now this is just set in the dimensions upon generation)
        int hMax = mazeData.GetUpperBound(1);

        for (int i = 0; i < rMax; i++)
        {
            for (int j = 0; j < hMax; j++)
            {
                for (int k = 0; k < cMax; k++)
                {
                    //This code runs on every block in the maze, if it is NOT a 0 then then block is solid. Else it's "air". 
                    if (world.GetBlock(i, j, k) != 0)
                    {
                        //If the block is solid
                        if (world.GetBlock(i, j + 1, k) == 0)
                        {
                            //Block above is air
                            AddFace(i, j, k, VoxelSide.TOP);
                        }
                        //Block below is air
                        if (world.GetBlock(i, j - 1, k) == 0)
                        {                
                            AddFace(i, j, k, VoxelSide.BOTTOM);
                        }
                        //Block east is air
                        if (world.GetBlock(i + 1, j, k) == 0)
                        {            
                            AddFace(i, j, k, VoxelSide.EAST);
                        }
                        //Block west is air
                        if (world.GetBlock(i - 1, j, k) == 0)
                        {                   
                            AddFace(i, j, k, VoxelSide.WEST);
                        }
                        //Block north is air
                        if (world.GetBlock(i, j, k + 1) == 0)
                        {                          
                            AddFace(i, j, k, VoxelSide.NORTH);
                        }
                        //Block south is air
                        if (world.GetBlock(i, j, k - 1) == 0)
                        {                         
                            AddFace(i, j, k, VoxelSide.SOUTH);
                        }

                    }

                }
            }
        }
        UpdateMesh();
    }

    /// <summary>
    /// Adds a face with a texture to the specified side of the cube
    /// </summary>
    /// <param name="x">The x coordinate</param>
    /// <param name="y">The y coordinate</param>
    /// <param name="z">The z coordinate</param>
    /// <param name="side"></param>
    private void AddFace(int x, int y, int z, VoxelSide side)
    {
        //Check what side of the cube we are trying to add. This is relevant to the
        //unfolded textures of the cube
        switch (side)
        {
            case VoxelSide.TOP:
                vertices.Add(new Vector3(x, y, z + 1));
                vertices.Add(new Vector3(x + 1, y, z + 1));
                vertices.Add(new Vector3(x + 1, y, z));
                vertices.Add(new Vector3(x, y, z));
                GenerateFace(top);
                break;
            case VoxelSide.NORTH:
                vertices.Add(new Vector3(x + 1, y - 1, z + 1));
                vertices.Add(new Vector3(x + 1, y, z + 1));
                vertices.Add(new Vector3(x, y, z + 1));
                vertices.Add(new Vector3(x, y - 1, z + 1));
                GenerateFace(north);
                break;
            case VoxelSide.EAST:
                vertices.Add(new Vector3(x + 1, y - 1, z));
                vertices.Add(new Vector3(x + 1, y, z));
                vertices.Add(new Vector3(x + 1, y, z + 1));
                vertices.Add(new Vector3(x + 1, y - 1, z + 1));
                GenerateFace(east);
                break;
            case VoxelSide.SOUTH:
                vertices.Add(new Vector3(x, y - 1, z));
                vertices.Add(new Vector3(x, y, z));
                vertices.Add(new Vector3(x + 1, y, z));
                vertices.Add(new Vector3(x + 1, y - 1, z));
                GenerateFace(south);
                break;
            case VoxelSide.WEST:
                vertices.Add(new Vector3(x, y - 1, z + 1));
                vertices.Add(new Vector3(x, y, z + 1));
                vertices.Add(new Vector3(x, y, z));
                vertices.Add(new Vector3(x, y - 1, z));
                GenerateFace(west);
                break;
            case VoxelSide.BOTTOM:
                vertices.Add(new Vector3(x, y - 1, z));
                vertices.Add(new Vector3(x + 1, y - 1, z));
                vertices.Add(new Vector3(x + 1, y - 1, z + 1));
                vertices.Add(new Vector3(x, y - 1, z + 1));
                GenerateFace(bottom);
                break;
        }

    }



    /// <summary>
    /// Generates the face for a particular voxel cube side
    /// </summary>
    /// <param name="side">The given side related to the texture</param>
    private void GenerateFace(Vector2 side)
    {
        triangles.Add(faceCount * 4); //0
        triangles.Add(faceCount * 4 + 1); //1
        triangles.Add(faceCount * 4 + 2); //2
        triangles.Add(faceCount * 4); //0
        triangles.Add(faceCount * 4 + 2); //2
        triangles.Add(faceCount * 4 + 3); //3

        uvFaces.Add(new Vector2(textureUnit * side.x, textureUnit * side.y + textureUnit));
        uvFaces.Add(new Vector2(textureUnit * side.x + textureUnit, textureUnit * side.y + textureUnit));
        uvFaces.Add(new Vector2(textureUnit * side.x + textureUnit, textureUnit * side.y));
        uvFaces.Add(new Vector2(textureUnit * side.x, textureUnit * side.y));

        faceCount++; 
    }


    /// <summary>
    /// Updates the mesh with the new data
    /// </summary>
    private void UpdateMesh()
    {
        //clear and set the vertices, triangles and uv
        mesh.Clear();
        mesh.vertices = vertices.ToArray();
        mesh.triangles = triangles.ToArray();
        mesh.uv = uvFaces.ToArray();
        mesh.RecalculateNormals();

        //upload the mesh to the meshfilter
        GetComponent<MeshFilter>().mesh = mesh;

        //upload the mesh to the meshcollider (we can use the same)
        col = GetComponent<MeshCollider>();
        col.sharedMesh = null;
        col.sharedMesh = mesh;

        //reset the chunk information (we won't need these until we make a new maze)
        vertices.Clear();
        triangles.Clear();
        uvFaces.Clear();
        faceCount = 0;
    }


}

